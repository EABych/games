import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import type { SecretAgentMission } from '../../types/secret-agent';
import './SecretAgent.css';

export const SecretAgentPlayer: React.FC = () => {
  const { roomId } = useParams<{ roomId: string }>();
  const [missions, setMissions] = useState<{cover: SecretAgentMission, main: SecretAgentMission} | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [hasReceivedMissions, setHasReceivedMissions] = useState(false);
  const [playerName, setPlayerName] = useState('');
  const [showMissions, setShowMissions] = useState(false);
  const [mainMissionStartTime, setMainMissionStartTime] = useState<Date | null>(null);
  const [mainMissionTimeLeft, setMainMissionTimeLeft] = useState<number | null>(null);
  const [isMainMissionActive, setIsMainMissionActive] = useState(false);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–∏–Ω —Ä–∞–∑
  const [userId] = useState(() => `player_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);

  useEffect(() => {
    // –¢–∞–π–º–µ—Ä –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –º–∏—Å—Å–∏–∏
    let interval: NodeJS.Timeout;
    
    if (isMainMissionActive && mainMissionStartTime && missions?.main.timeLimit) {
      interval = setInterval(() => {
        const elapsed = Math.floor((Date.now() - mainMissionStartTime.getTime()) / 1000);
        const remaining = (missions.main.timeLimit! * 60) - elapsed;
        
        if (remaining <= 0) {
          setMainMissionTimeLeft(0);
          setIsMainMissionActive(false);
        } else {
          setMainMissionTimeLeft(remaining);
        }
      }, 1000);
    }

    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [isMainMissionActive, mainMissionStartTime, missions]);

  const handleGetMissions = async () => {
    if (!playerName.trim() || !roomId) return;

    setIsLoading(true);
    try {
      const response = await fetch(`https://mafia-backend-5z0e.onrender.com/api/secret-agent/get-missions?roomId=${roomId}&userId=${userId}&playerName=${encodeURIComponent(playerName)}`);
      
      if (response.ok) {
        const data = await response.json();
        setMissions({
          cover: data.coverMission,
          main: data.mainMission
        });
        setHasReceivedMissions(true);
      } else {
        alert('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏—Å—Å–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏—Å—Å–∏–π:', error);
      alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleStartMainMission = () => {
    setMainMissionStartTime(new Date());
    setIsMainMissionActive(true);
    if (missions?.main.timeLimit) {
      setMainMissionTimeLeft(missions.main.timeLimit * 60);
    }
  };

  const handleCompleteMainMission = () => {
    setIsMainMissionActive(false);
    setMainMissionStartTime(null);
    setMainMissionTimeLeft(null);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  };

  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getDifficultyColor = (difficulty: string): string => {
    switch (difficulty) {
      case 'easy': return '#34C759';
      case 'medium': return '#FF9500'; 
      case 'hard': return '#FF3B30';
      default: return '#007AFF';
    }
  };

  const getDifficultyText = (difficulty: string): string => {
    switch (difficulty) {
      case 'easy': return '–ü—Ä–æ—Å—Ç–∞—è';
      case 'medium': return '–°—Ä–µ–¥–Ω—è—è';
      case 'hard': return '–°–ª–æ–∂–Ω–∞—è';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è';
    }
  };

  if (!hasReceivedMissions) {
    return (
      <div className="secret-agent-player">
        <div className="player-intro">
          <div className="intro-header">
            <div className="agent-icon">AGENT</div>
            <h1>–°–µ–∫—Ä–µ—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è</h1>
            <div className="classified-badge">
              –°–û–í–ï–†–®–ï–ù–ù–û –°–ï–ö–†–ï–¢–ù–û
            </div>
          </div>

          <div className="intro-content">
            <div className="room-info">
              <div className="room-detail">
                <span className="detail-label">–ö–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏:</span>
                <span className="detail-value">{roomId}</span>
              </div>
            </div>

            <div className="agent-registration">
              <h2>–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞</h2>
              <div className="name-input-group">
                <input
                  type="text"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∑—ã–≤–Ω–æ–π"
                  value={playerName}
                  onChange={(e) => setPlayerName(e.target.value)}
                  className="agent-name-input"
                  maxLength={20}
                  onKeyPress={(e) => {
                    if (e.key === 'Enter') {
                      handleGetMissions();
                    }
                  }}
                />
                <button
                  onClick={handleGetMissions}
                  disabled={!playerName.trim() || isLoading}
                  className="get-missions-btn"
                >
                  {isLoading ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–ü–æ–ª—É—á–∏—Ç—å –º–∏—Å—Å–∏–∏'}
                </button>
              </div>
            </div>

            <div className="mission-briefing">
              <h3>–ë—Ä–∏—Ñ–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏–∏:</h3>
              <div className="briefing-list">
                <div className="briefing-item">
                  <span className="briefing-icon">üé≠</span>
                  <span>–ü–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–∫—Ä—ã—Ç–∏—è - –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –µ–≥–æ –≤—Å—é –∏–≥—Ä—É –Ω–µ–∑–∞–º–µ—Ç–Ω–æ</span>
                </div>
                <div className="briefing-item">
                  <span className="briefing-icon">BRIEF</span>
                  <span>–ü–æ–ª—É—á–∏—Ç–µ –≥–ª–∞–≤–Ω—É—é –º–∏—Å—Å–∏—é - –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞ 5 –º–∏–Ω—É—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–º–µ—Ç–∏–ª</span>
                </div>
                <div className="briefing-item">
                  <span className="briefing-icon">üèÜ</span>
                  <span>–¶–µ–ª—å: –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≥–ª–∞–≤–Ω—É—é –º–∏—Å—Å–∏—é –∏–ª–∏ –Ω–µ –¥–∞—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç—å –≤–∞—à–µ –ø—Ä–∏–∫—Ä—ã—Ç–∏–µ</span>
                </div>
                <div className="briefing-item">
                  <span className="briefing-icon">‚ö†Ô∏è</span>
                  <span>–í–Ω–∏–º–∞–Ω–∏–µ: –µ—Å–ª–∏ –≤–∞—Å —Ä–∞—Å–∫—Ä–æ—é—Ç - –º–∏—Å—Å–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="secret-agent-player">
      <div className="player-header">
        <div className="agent-info">
          <h1>–ê–≥–µ–Ω—Ç {playerName}</h1>
          <div className="operation-status">
            <span className="status-label">–°—Ç–∞—Ç—É—Å:</span>
            <span className="status-value active">üü¢ –í –æ–ø–µ—Ä–∞—Ü–∏–∏</span>
          </div>
        </div>
        
        <button 
          className="toggle-missions-btn"
          onClick={() => setShowMissions(!showMissions)}
        >
          {showMissions ? '–°–∫—Ä—ã—Ç—å –º–∏—Å—Å–∏–∏' : '–ü–æ–∫–∞–∑–∞—Ç—å –º–∏—Å—Å–∏–∏'}
        </button>
      </div>

      {showMissions && missions && (
        <div className="missions-display">
          <div className="mission-card cover-mission">
            <div className="mission-header">
              <span className="mission-icon">üé≠</span>
              <span className="mission-type">–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–∫—Ä—ã—Ç–∏—è</span>
              <span 
                className="mission-difficulty"
                style={{ backgroundColor: getDifficultyColor(missions.cover.difficulty) }}
              >
                {getDifficultyText(missions.cover.difficulty)}
              </span>
            </div>
            
            <div className="mission-content">
              <h3 className="mission-title">{missions.cover.title}</h3>
              <p className="mission-description">{missions.cover.description}</p>
            </div>
            
            <div className="mission-instructions">
              <div className="instruction-item">
                <span className="instruction-icon">1</span>
                <span>–í—ã–ø–æ–ª–Ω—è–π —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –≤—Å—é –∏–≥—Ä—É –Ω–µ–∑–∞–º–µ—Ç–Ω–æ</span>
              </div>
              <div className="instruction-item">
                <span className="instruction-icon">ü§´</span>
                <span>–ù–µ –¥–∞–π –¥—Ä—É–≥–∏–º –¥–æ–≥–∞–¥–∞—Ç—å—Å—è –æ —Ç–≤–æ–µ–º –ø—Ä–∏–∫—Ä—ã—Ç–∏–∏</span>
              </div>
            </div>
          </div>

          <div className="mission-card main-mission">
            <div className="mission-header">
              <span className="mission-icon">–ú–ò–°–°–ò–Ø</span>
              <span className="mission-type">–ì–ª–∞–≤–Ω–∞—è –º–∏—Å—Å–∏—è</span>
              <span 
                className="mission-difficulty"
                style={{ backgroundColor: getDifficultyColor(missions.main.difficulty) }}
              >
                {getDifficultyText(missions.main.difficulty)}
              </span>
            </div>
            
            <div className="mission-content">
              <h3 className="mission-title">{missions.main.title}</h3>
              <p className="mission-description">{missions.main.description}</p>
            </div>

            {missions.main.timeLimit && (
              <div className="mission-timer-section">
                {!isMainMissionActive && mainMissionTimeLeft === null ? (
                  <div className="timer-controls">
                    <div className="timer-info">
                      <span className="timer-icon">TIME</span>
                      <span>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {missions.main.timeLimit} –º–∏–Ω—É—Ç</span>
                    </div>
                    <button 
                      className="start-mission-btn"
                      onClick={handleStartMainMission}
                    >
                      üöÄ –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                    </button>
                  </div>
                ) : isMainMissionActive && mainMissionTimeLeft !== null ? (
                  <div className="active-timer">
                    <div className={`timer-display ${mainMissionTimeLeft <= 60 ? 'urgent' : ''}`}>
                      <span className="timer-icon">TIME</span>
                      <span className="timer-time">{formatTime(mainMissionTimeLeft)}</span>
                    </div>
                    <div className="timer-progress">
                      <div 
                        className="progress-bar"
                        style={{ 
                          width: `${100 - (mainMissionTimeLeft / (missions.main.timeLimit! * 60)) * 100}%` 
                        }}
                      ></div>
                    </div>
                    <button 
                      className="complete-mission-btn"
                      onClick={handleCompleteMainMission}
                    >
                      ‚úÖ –ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                    </button>
                  </div>
                ) : (
                  <div className="mission-completed">
                    <span className="completion-icon">‚úÖ</span>
                    <span>–ì–ª–∞–≤–Ω–∞—è –º–∏—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</span>
                  </div>
                )}
              </div>
            )}

            <div className="mission-instructions">
              <div className="instruction-item">
                <span className="instruction-icon">1</span>
                <span>–í—ã–ø–æ–ª–Ω–∏ –∑–∞ {missions.main.timeLimit} –º–∏–Ω—É—Ç –Ω–µ–∑–∞–º–µ—Ç–Ω–æ</span>
              </div>
              <div className="instruction-item">
                <span className="instruction-icon">2</span>
                <span>–ù–∏–∫—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–Ω—è—Ç—å —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</span>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="player-tips">
        <h3>üí° –°–æ–≤–µ—Ç—ã –∞–≥–µ–Ω—Ç—É</h3>
        <div className="tips-list">
          <div className="tip-item">
            <span className="tip-icon">üé≠</span>
            <span>–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–∫—Ä—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ —Ç–≤–æ—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞</span>
          </div>
          <div className="tip-item">
            <span className="tip-icon">!</span>
            <span>–ì–ª–∞–≤–Ω—É—é –º–∏—Å—Å–∏—é –≤—ã–ø–æ–ª–Ω—è–π –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω—ã–π –º–æ–º–µ–Ω—Ç, –Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –≤—Ä–µ–º–µ–Ω–∏</span>
          </div>
          <div className="tip-item">
            <span className="tip-icon">ü§´</span>
            <span>–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π –º–∏—Å—Å–∏–∏ –≤–µ–¥–∏ —Å–µ–±—è –æ–±—ã—á–Ω–æ –µ—â–µ 5 –º–∏–Ω—É—Ç</span>
          </div>
          <div className="tip-item">
            <span className="tip-icon">üèÜ</span>
            <span>–ü–æ–±–µ–∂–¥–∞–µ—à—å –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª –≥–ª–∞–≤–Ω—É—é –º–∏—Å—Å–∏—é –∏–ª–∏ —Ç–µ–±—è –Ω–µ —Ä–∞—Å–∫—Ä—ã–ª–∏</span>
          </div>
        </div>
      </div>

      <div className="warning-footer">
        <div className="warning-text">
          –î–µ—Ä–∂–∏—Ç–µ –º–∏—Å—Å–∏–∏ –≤ —Å–µ–∫—Ä–µ—Ç–µ! –ü–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ —ç–∫—Ä–∞–Ω —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–≥–ª—è–¥—ã–≤–∞–µ—Ç.
        </div>
      </div>
    </div>
  );
};