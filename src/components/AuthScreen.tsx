import React, { useState, useEffect } from 'react';

interface AuthScreenProps {
  onAuth: () => void;
}

const CORRECT_PASSWORD = '–•–æ—á—É –∏–≥—Ä–∞—Ç—å';
const AUTH_KEY = 'games_auth_status';

export const AuthScreen: React.FC<AuthScreenProps> = ({ onAuth }) => {
  const [password, setPassword] = useState('');
  const [error, setError] = useState(false);
  const [isShaking, setIsShaking] = useState(false);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const isAuthenticated = localStorage.getItem(AUTH_KEY) === 'true';
    if (isAuthenticated) {
      onAuth();
    }
  }, [onAuth]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (password === CORRECT_PASSWORD) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      localStorage.setItem(AUTH_KEY, 'true');
      setError(false);
      onAuth();
    } else {
      setError(true);
      setIsShaking(true);
      setPassword('');
      
      // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Å—Ç—Ä—è—Ö–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
      setTimeout(() => setIsShaking(false), 500);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setPassword(e.target.value);
    if (error) {
      setError(false);
    }
  };

  return (
    <div className="auth-screen">
      <div className={`auth-container ${isShaking ? 'shake' : ''}`}>
        <div className="auth-icon">
          üéÆ
        </div>
        
        <h1 className="auth-title">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>
        <p className="auth-subtitle">–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–∞–º</p>
        
        <form onSubmit={handleSubmit} className="auth-form">
          <div className="input-container">
            <input
              type="password"
              value={password}
              onChange={handleInputChange}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              className={`auth-input ${error ? 'error' : ''}`}
              autoFocus
              autoComplete="off"
            />
            {error && (
              <div className="error-message">
                –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
              </div>
            )}
          </div>
          
          <button 
            type="submit" 
            className="auth-button"
            disabled={!password.trim()}
          >
            –í–æ–π—Ç–∏
          </button>
        </form>
        
        <div className="auth-hint">
          –ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤—ã—Ä–∞–∑–∏—Ç–µ —Å–≤–æ—ë –∂–µ–ª–∞–Ω–∏–µ –ø–æ–∏–≥—Ä–∞—Ç—å
        </div>
      </div>
    </div>
  );
};