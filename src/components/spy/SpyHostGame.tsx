import React, { useState } from 'react';
import { QRCodeModal } from '../mafia/QRCodeModal';

interface SpyHostGameProps {
  settings: SpyGameSettings;
  onBack: () => void;
  onNewGame: () => void;
}

interface SpyGameSettings {
  playerCount: number;
}

export const SpyHostGame: React.FC<SpyHostGameProps> = ({ settings, onBack, onNewGame }) => {
  const [gameStarted, setGameStarted] = useState<boolean>(false);
  const [serverStatus, setServerStatus] = useState<string>('');
  const [showQRModal, setShowQRModal] = useState<boolean>(false);
  const [currentRole, setCurrentRole] = useState<any>(null);
  const [roomId, setRoomId] = useState<string>('');

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const createGameOnServer = async () => {
    try {
      const response = await fetch('https://mafia-backend-5z0e.onrender.com/api/spy/generate-game', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          playerCount: settings.playerCount
        })
      });

      if (response.ok) {
        const data = await response.json();
        setServerStatus(`‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è ${data.playerCount} –∏–≥—Ä–æ–∫–æ–≤. –õ–æ–∫–∞—Ü–∏—è: ${data.location}. ID –∫–æ–º–Ω–∞—Ç—ã: ${data.roomId}`);
        setRoomId(data.roomId);
        setGameStarted(true);
      } else {
        setServerStatus('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã');
      }
    } catch (error) {
      setServerStatus('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
  };

  // –°–±—Ä–æ—Å –∏–≥—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const resetGameOnServer = async () => {
    try {
      await fetch('https://mafia-backend-5z0e.onrender.com/api/spy/reset', {
        method: 'POST'
      });
      setServerStatus('üîÑ –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
      setGameStarted(false);
      setCurrentRole(null);
      setRoomId('');
    } catch (error) {
      setServerStatus('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã');
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
  const getRoleOnThisDevice = async () => {
    try {
      const url = roomId 
        ? `https://mafia-backend-5z0e.onrender.com/api/spy/get-role?roomId=${roomId}`
        : 'https://mafia-backend-5z0e.onrender.com/api/spy/get-role';
      
      const response = await fetch(url);
      
      if (response.ok) {
        const data = await response.json();
        setCurrentRole(data);
      } else {
        const errorData = await response.json();
        setServerStatus(`‚ùå ${errorData.error}`);
      }
    } catch (error) {
      setServerStatus('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏');
    }
  };

  const getRoleColor = (isSpy: boolean): string => {
    return isSpy ? '#e74c3c' : '#27ae60';
  };

  const getRoleEmoji = (isSpy: boolean): string => {
    return isSpy ? 'üïµÔ∏è' : 'üè†';
  };

  if (currentRole) {
    return (
      <div className="spy-host-game">
        <div className="role-display">
          <div className="host-role-card">
            {currentRole.location ? (
              <div className="location-display">
                <div className="location-badge">
                  {currentRole.location}
                </div>
              </div>
            ) : (
              <div className="spy-display">
                <h1 className="spy-indicator">–®–ü–ò–û–ù</h1>
              </div>
            )}
            
            <div className="close-actions">
              <button onClick={() => setCurrentRole(null)} className="close-button">
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="spy-host-game">
      <div className="game-header">
        <h2>–í–µ–¥—É—â–∏–π –®–ø–∏–æ–Ω–∞</h2>
        <p>–ò–≥—Ä–æ–∫–æ–≤: {settings.playerCount}</p>
      </div>

      <div className="game-body">
        <div className="server-status">
        {!gameStarted ? (
          <button onClick={createGameOnServer} className="create-game-button">
            –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          </button>
        ) : (
          <div className="game-info">
            <p>{serverStatus}</p>
            <div className="player-access-section">
              <h4>–î–æ—Å—Ç—É–ø –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤:</h4>
              <div className="access-buttons">
                <button 
                  onClick={() => setShowQRModal(true)}
                  className="show-qr-button"
                >
                  –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥
                </button>
                
                <button 
                  onClick={getRoleOnThisDevice}
                  className="get-role-here-button"
                >
                  –ü–æ–∫–∞–∑–∞—Ç—å —Ä–æ–ª—å –∏–≥—Ä–æ–∫—É
                </button>
              </div>
              <p className="access-hint">
                –ò–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
              </p>
            </div>
          </div>
        )}
        </div>

        <div className="instructions">
          <h3>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h3>
          <ul>
            <li>–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ</li>
            <li>–î–∞–π—Ç–µ –∏–≥—Ä–æ–∫–∞–º –¥–æ—Å—Ç—É–ø –∫ —Ä–æ–ª—è–º —á–µ—Ä–µ–∑ QR-–∫–æ–¥ –∏–ª–∏ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ</li>
            <li>–ö–æ–≥–¥–∞ –≤—Å–µ —Ä–æ–ª–∏ —Ä–æ–∑–¥–∞–Ω—ã - –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∏–≥—Ä—É</li>
            <li>–ò–≥—Ä–æ–∫–∏ –∑–∞–¥–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É –≤–æ–ø—Ä–æ—Å—ã –æ –ª–æ–∫–∞—Ü–∏–∏</li>
            <li>–¶–µ–ª—å: –Ω–∞–π—Ç–∏ —à–ø–∏–æ–Ω–∞ –∏–ª–∏ —É–≥–∞–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é</li>
          </ul>
        </div>
      </div>

      <div className="game-management">
        <button onClick={resetGameOnServer} className="reset-game-button">
          –ù–æ–≤–∞—è –∏–≥—Ä–∞ (—Å–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª–∏)
        </button>
        
        <button onClick={onNewGame} className="new-setup-button">
          –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        </button>
      </div>

      <QRCodeModal 
        isOpen={showQRModal}
        onClose={() => setShowQRModal(false)}
        roomId={roomId}
        gameType="spy"
      />
    </div>
  );
};