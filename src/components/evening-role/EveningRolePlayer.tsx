import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import type { EveningRoleTask } from '../../types/evening-role';
import './EveningRole.css';

interface TimerState {
  isActive: boolean;
  timeLeft: number;
  totalTime: number;
}

export const EveningRolePlayer: React.FC = () => {
  const { roomId } = useParams<{ roomId: string }>();
  const [playerTask, setPlayerTask] = useState<EveningRoleTask | null>(null);
  const [hasReceivedTask, setHasReceivedTask] = useState(false);
  const [canChangeRole, setCanChangeRole] = useState(true);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [userId] = useState(() => `player_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
  const [timer, setTimer] = useState<TimerState>({
    isActive: false,
    timeLeft: 0,
    totalTime: 0
  });

  // –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
  useEffect(() => {
    let interval: NodeJS.Timeout;

    if (timer.isActive && timer.timeLeft > 0) {
      interval = setInterval(() => {
        setTimer(prev => ({
          ...prev,
          timeLeft: prev.timeLeft - 1
        }));
      }, 1000);
    } else if (timer.timeLeft === 0 && timer.isActive) {
      // –¢–∞–π–º–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
      setTimer(prev => ({ ...prev, isActive: false }));
      
      // –ï—Å–ª–∏ —É –∑–∞–¥–∞–Ω–∏—è –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
      if (playerTask?.hasTimer && playerTask.timerDuration) {
        setTimeout(() => {
          setTimer({
            isActive: true,
            timeLeft: playerTask.timerDuration!,
            totalTime: playerTask.timerDuration!
          });
        }, 1000);
      }
    }

    return () => clearInterval(interval);
  }, [timer.isActive, timer.timeLeft, playerTask]);

  const loadTask = async () => {
    if (!roomId) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      const response = await fetch(`https://mafia-backend-fbm5.onrender.com/api/evening-role/get-task?roomId=${roomId}&userId=${userId}`);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è');
      }
      
      const data = await response.json();
      setPlayerTask(data.task);
      setCanChangeRole(data.canChangeRole);
      setHasReceivedTask(true);

      // –ï—Å–ª–∏ —É –∑–∞–¥–∞–Ω–∏—è –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä, –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
      if (data.task.hasTimer && data.task.timerDuration) {
        setTimer({
          isActive: false,
          timeLeft: data.task.timerDuration,
          totalTime: data.task.timerDuration
        });
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏—è:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setIsLoading(false);
    }
  };

  const handleGetTask = () => {
    loadTask();
  };

  const handleChangeTask = async () => {
    if (!roomId || !canChangeRole) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      const response = await fetch('https://mafia-backend-fbm5.onrender.com/api/evening-role/change-task', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ roomId, userId }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ä–æ–ª–∏');
      }

      const data = await response.json();
      setPlayerTask(data.task);
      setCanChangeRole(data.canChangeRole);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      setTimer({
        isActive: false,
        timeLeft: 0,
        totalTime: 0
      });

      // –ï—Å–ª–∏ —É –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä, –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
      if (data.task.hasTimer && data.task.timerDuration) {
        setTimer({
          isActive: false,
          timeLeft: data.task.timerDuration,
          totalTime: data.task.timerDuration
        });
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ä–æ–ª–∏:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setIsLoading(false);
    }
  };

  const startTimer = () => {
    if (playerTask?.hasTimer && playerTask.timerDuration) {
      setTimer({
        isActive: true,
        timeLeft: playerTask.timerDuration,
        totalTime: playerTask.timerDuration
      });
    }
  };

  const stopTimer = () => {
    setTimer(prev => ({ ...prev, isActive: false }));
  };

  const resetTimer = () => {
    if (playerTask?.hasTimer && playerTask.timerDuration) {
      setTimer({
        isActive: false,
        timeLeft: playerTask.timerDuration,
        totalTime: playerTask.timerDuration
      });
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const getTimerColor = () => {
    if (!timer.totalTime) return '#007AFF';
    const percentage = (timer.timeLeft / timer.totalTime) * 100;
    if (percentage <= 10) return '#FF3B30';
    if (percentage <= 30) return '#FF9500';
    return '#007AFF';
  };

  if (!roomId) {
    return (
      <div className="evening-role-player">
        <div className="error-message">
          <h2>–û—à–∏–±–∫–∞</h2>
          <p>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –≤–µ–¥—É—â–µ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π QR-–∫–æ–¥.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="evening-role-player">
      <div className="player-header">
        <h1>–†–æ–ª—å –Ω–∞ –≤–µ—á–µ—Ä</h1>
        <div className="room-id">–ö–æ–º–Ω–∞—Ç–∞: {roomId}</div>
      </div>

      <div className="player-content">
        {error && (
          <div className="error-message">
            <h2>–û—à–∏–±–∫–∞</h2>
            <p>{error}</p>
            <button 
              className="get-task-btn"
              onClick={handleGetTask}
              disabled={isLoading}
            >
              üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        )}

        {!hasReceivedTask && !error ? (
          <div className="get-task-section">
            <div className="welcome-card">
              <div className="welcome-icon">üé≠</div>
              <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h2>
              <p>–ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤–µ—Å—å –≤–µ—á–µ—Ä</p>
              
              <button 
                className="get-task-btn"
                onClick={handleGetTask}
                disabled={isLoading}
              >
                {isLoading ? '‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏...' : 'üé≤ –ü–æ–ª—É—á–∏—Ç—å –º–æ—é —Ä–æ–ª—å'}
              </button>
              
              <div className="instructions">
                <h3>–ß—Ç–æ –¥–µ–ª–∞—Ç—å?</h3>
                <ul>
                  <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ</li>
                  <li>–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –µ–≥–æ –≤–µ—Å—å –≤–µ—á–µ—Ä</li>
                  <li>–ï—Å–ª–∏ —É –∑–∞–¥–∞–Ω–∏—è –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ</li>
                  <li>–í–µ—Å–µ–ª–∏—Ç–µ—Å—å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏–≥—Ä–æ–π!</li>
                </ul>
              </div>
            </div>
          </div>
        ) : (
          <div className="task-section">
            <div className="task-card">
              <h2>–í–∞—à–∞ —Ä–æ–ª—å –Ω–∞ –≤–µ—á–µ—Ä</h2>
              
              <div className="task-content">
                <div className="task-text">
                  {playerTask?.text}
                </div>
                
                {playerTask?.requiresOtherPlayer && (
                  <div className="task-note">
                    üí° –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
                  </div>
                )}
                
                {playerTask?.category && (
                  <div className="task-category">
                    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {playerTask.category}
                  </div>
                )}
              </div>

              {playerTask?.hasTimer && playerTask.timerDuration && (
                <div className="timer-section">
                  <h3>–¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–∞–Ω–∏—è</h3>
                  <div className="timer-display">
                    <div 
                      className="timer-circle"
                      style={{ '--timer-color': getTimerColor() } as React.CSSProperties}
                    >
                      <span className="timer-text">
                        {formatTime(timer.timeLeft)}
                      </span>
                    </div>
                  </div>
                  
                  <div className="timer-controls">
                    {!timer.isActive ? (
                      <button 
                        className="timer-btn start"
                        onClick={startTimer}
                        disabled={timer.timeLeft === 0}
                      >
                        ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç
                      </button>
                    ) : (
                      <button 
                        className="timer-btn stop"
                        onClick={stopTimer}
                      >
                        ‚è∏Ô∏è –ü–∞—É–∑–∞
                      </button>
                    )}
                    
                    <button 
                      className="timer-btn reset"
                      onClick={resetTimer}
                    >
                      üîÑ –°–±—Ä–æ—Å
                    </button>
                  </div>
                  
                  <div className="timer-info">
                    –ò–Ω—Ç–µ—Ä–≤–∞–ª: {Math.round((playerTask.timerDuration || 0) / 60)} –º–∏–Ω
                  </div>
                </div>
              )}

              <div className="task-actions">
                {canChangeRole ? (
                  <button 
                    className="new-task-btn"
                    onClick={handleChangeTask}
                    disabled={isLoading}
                  >
                    {isLoading ? '‚è≥ –°–º–µ–Ω–∞ —Ä–æ–ª–∏...' : 'üé≤ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å (–æ–¥–∏–Ω —Ä–∞–∑)'}
                  </button>
                ) : (
                  <div className="role-change-disabled">
                    <p>–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å</p>
                    <small>–ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑</small>
                  </div>
                )}
              </div>
            </div>

            <div className="game-tips">
              <h3>–°–æ–≤–µ—Ç—ã</h3>
              <div className="tips-list">
                <div className="tip-item">
                  <span className="tip-icon">üéØ</span>
                  <span>–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤–µ—Å—å –≤–µ—á–µ—Ä –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–µ—Å–µ–ª—å—è</span>
                </div>
                <div className="tip-item">
                  <span className="tip-icon">‚è∞</span>
                  <span>–ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∏–º –∏ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ–≤—Ä–µ–º—è</span>
                </div>
                <div className="tip-item">
                  <span className="tip-icon">ü§ù</span>
                  <span>–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç</span>
                </div>
                <div className="tip-item">
                  <span className="tip-icon">üòÑ</span>
                  <span>–ì–ª–∞–≤–Ω–æ–µ - –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –∏ —Å–º–µ—à–∏—Ç—å –æ–∫—Ä—É–∂–∞—é—â–∏—Ö!</span>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};