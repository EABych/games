import React, { useState, useRef, useEffect } from 'react';
import type { AdultFantsPlayer, AdultFantsTask } from '../../types/adult-fants';
import { getRandomAdultFantsTask } from '../../data/adult-fants-tasks';
import './AdultFants.css';

interface AdultFantsSpinWheelProps {
  players: AdultFantsPlayer[];
  onTaskSelected: (player: AdultFantsPlayer, task: AdultFantsTask) => void;
  onBackToSetup: () => void;
}

export const AdultFantsSpinWheel: React.FC<AdultFantsSpinWheelProps> = ({ 
  players, 
  onTaskSelected,
  onBackToSetup 
}) => {
  const [isSpinning, setIsSpinning] = useState(false);
  const [selectedPlayer, setSelectedPlayer] = useState<AdultFantsPlayer | null>(null);
  const wheelRef = useRef<HTMLDivElement>(null);
  const arrowRef = useRef<HTMLDivElement>(null);

  const playerCount = players.length;
  const sectorAngle = 360 / playerCount;

  const spinWheel = () => {
    if (isSpinning) return;

    setIsSpinning(true);
    setSelectedPlayer(null);

    // –°–ª—É—á–∞–π–Ω—ã–π –∏–≥—Ä–æ–∫
    const randomPlayerIndex = Math.floor(Math.random() * players.length);
    const selectedPlayer = players[randomPlayerIndex];

    // –°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    const task = getRandomAdultFantsTask();

    // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const targetAngle = randomPlayerIndex * sectorAngle + (sectorAngle / 2);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ + —Ü–µ–ª–µ–≤–æ–π —É–≥–æ–ª
    const spins = 4 + Math.random() * 3; // 4-7 –æ–±–æ—Ä–æ—Ç–æ–≤
    const finalAngle = spins * 360 + targetAngle;

    if (arrowRef.current) {
      arrowRef.current.style.transition = 'transform 4s cubic-bezier(0.25, 0.1, 0.25, 1)';
      arrowRef.current.style.transform = `rotate(${finalAngle}deg)`;
    }

    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    setTimeout(() => {
      setIsSpinning(false);
      setSelectedPlayer(selectedPlayer);
      
      // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º
      setTimeout(() => {
        onTaskSelected(selectedPlayer, task);
      }, 3000);
    }, 4000);
  };

  const resetArrow = () => {
    if (arrowRef.current) {
      arrowRef.current.style.transition = 'none';
      arrowRef.current.style.transform = 'rotate(0deg)';
    }
  };

  useEffect(() => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
    resetArrow();
  }, [players]);

  return (
    <div className="adult-fants-spin-wheel">
      <div className="wheel-header">
        <button 
          className="back-btn"
          onClick={onBackToSetup}
          disabled={isSpinning}
        >
          ‚Üê –ù–∞–∑–∞–¥
        </button>
        <h1>–í–∑—Ä–æ—Å–ª—ã–µ –§–∞–Ω—Ç—ã 18+</h1>
        <div className="players-count">–ò–≥—Ä–æ–∫–æ–≤: {playerCount}</div>
      </div>

      <div className="wheel-container">
        <div className="wheel-wrapper">
          {/* –ö–æ–ª–µ—Å–æ —Å —Å–µ–∫—Ç–æ—Ä–∞–º–∏ */}
          <div ref={wheelRef} className="wheel">
            {players.map((player, index) => {
              const rotation = index * sectorAngle;
              return (
                <div
                  key={player.id}
                  className={`wheel-sector ${selectedPlayer?.id === player.id ? 'selected' : ''}`}
                  style={{
                    transform: `rotate(${rotation}deg)`,
                    backgroundColor: player.color,
                    '--sector-angle': `${sectorAngle}deg`
                  } as React.CSSProperties}
                >
                  <div className="sector-content">
                    <span className="player-name">{player.name}</span>
                  </div>
                </div>
              );
            })}
          </div>

          {/* –°—Ç—Ä–µ–ª–∫–∞ */}
          <div 
            ref={arrowRef}
            className={`wheel-arrow ${isSpinning ? 'spinning' : ''}`}
          >
            <div className="arrow-pointer"></div>
          </div>

          {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ */}
          <button
            className={`spin-button ${isSpinning ? 'spinning' : ''}`}
            onClick={spinWheel}
            disabled={isSpinning}
          >
            {isSpinning ? (
              <>
                <div className="spin-icon">üåÄ</div>
                <span>–ö—Ä—É—Ç–∏—Ç—Å—è...</span>
              </>
            ) : (
              <>
                <div className="spin-icon">SPIN</div>
                <span>–ö–†–£–¢–ò–¢–¨</span>
              </>
            )}
          </button>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
        {selectedPlayer && !isSpinning && (
          <div className="selection-result">
            <div className="result-animation">
              <div 
                className="selected-player-card"
                style={{ backgroundColor: selectedPlayer.color }}
              >
                <div className="player-avatar">
                  {selectedPlayer.name.charAt(0).toUpperCase()}
                </div>
                <div className="player-info">
                  <div className="player-name">{selectedPlayer.name}</div>
                  <div className="result-text">–í—ã–±—Ä–∞–Ω –¥–ª—è –∑–∞–¥–∞–Ω–∏—è!</div>
                </div>
              </div>
              <div className="countdown-dots">
                <div className="dot"></div>
                <div className="dot"></div>
                <div className="dot"></div>
              </div>
            </div>
          </div>
        )}
      </div>

      <div className="wheel-instructions">
        <div className="instruction-item">
          <span className="instruction-icon">1</span>
          <span>–ù–∞–∂–º–∏—Ç–µ –∫—Ä–∞—Å–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ —Ü–µ–Ω—Ç—Ä–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞</span>
        </div>
        <div className="instruction-item">
          <span className="instruction-icon">‚è∞</span>
          <span>–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ —Å—Ç—Ä–µ–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è</span>
        </div>
        <div className="instruction-item">
          <span className="instruction-icon">üé≠</span>
          <span>–ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∑–∞–¥–∞–Ω–∏–µ</span>
        </div>
      </div>
    </div>
  );
};