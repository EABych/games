import React, { useState, useEffect } from 'react';
import { QRCodeModal } from './QRCodeModal';
import './QRCodeModal.css';

interface MafiaHostTimerProps {
  settings: MafiaGameSettings;
  onBack: () => void;
  onNewGame: () => void;
}

interface MafiaGameSettings {
  playerCount: number;
  includeDoctor: boolean;
  includeDetective: boolean;
  includeSheriff: boolean;
  includeDon: boolean;
  discussionTime: number;
  votingTime: number;
  nightTime: number;
}

type TimerPhase = 'ready' | 'discussion' | 'voting' | 'night';

export const MafiaHostTimer: React.FC<MafiaHostTimerProps> = ({ settings, onBack, onNewGame }) => {
  const [phase, setPhase] = useState<TimerPhase>('ready');
  const [timeLeft, setTimeLeft] = useState<number>(0);
  const [isActive, setIsActive] = useState<boolean>(false);
  const [gameStarted, setGameStarted] = useState<boolean>(false);
  const [serverStatus, setServerStatus] = useState<string>('');
  const [showQRModal, setShowQRModal] = useState<boolean>(false);

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const createGameOnServer = async () => {
    try {
      const response = await fetch('https://mafia-backend-5z0e.onrender.com/api/mafia/generate-roles', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          playerCount: settings.playerCount,
          settings: {
            includeDoctor: settings.includeDoctor,
            includeDetective: settings.includeDetective,
            includeSheriff: settings.includeSheriff,
            includeDon: settings.includeDon
          }
        })
      });

      if (response.ok) {
        const data = await response.json();
        setServerStatus(`‚úÖ –†–æ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã: ${data.mafiaCount} –º–∞—Ñ–∏–∏, ${data.citizensCount} –º–∏—Ä–Ω—ã—Ö`);
        setGameStarted(true);
      } else {
        setServerStatus('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã');
      }
    } catch (error) {
      setServerStatus('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
  };

  // –°–±—Ä–æ—Å –∏–≥—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const resetGameOnServer = async () => {
    try {
      await fetch('https://mafia-backend-5z0e.onrender.com/api/mafia/reset', {
        method: 'POST'
      });
      setServerStatus('üîÑ –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
      setGameStarted(false);
    } catch (error) {
      setServerStatus('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã');
    }
  };

  // –¢–∞–π–º–µ—Ä
  useEffect(() => {
    let interval: number | null = null;
    
    if (isActive && timeLeft > 0) {
      interval = window.setInterval(() => {
        setTimeLeft(timeLeft => {
          if (timeLeft <= 1) {
            setIsActive(false);
            return 0;
          }
          return timeLeft - 1;
        });
      }, 1000);
    } else if (timeLeft === 0 && isActive) {
      setIsActive(false);
    }

    return () => {
      if (interval) window.clearInterval(interval);
    };
  }, [isActive, timeLeft]);

  const startTimer = (newPhase: TimerPhase) => {
    let duration = 0;
    
    switch (newPhase) {
      case 'discussion':
        duration = settings.discussionTime;
        break;
      case 'voting':
        duration = settings.votingTime;
        break;
      case 'night':
        duration = settings.nightTime;
        break;
      default:
        return;
    }

    setPhase(newPhase);
    setTimeLeft(duration);
    setIsActive(true);
  };

  const stopTimer = () => {
    setIsActive(false);
  };

  const resetTimer = () => {
    setIsActive(false);
    setTimeLeft(0);
    setPhase('ready');
  };

  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getPhaseText = (): string => {
    switch (phase) {
      case 'discussion':
        return 'üí¨ –û–±—Å—É–∂–¥–µ–Ω–∏–µ';
      case 'voting':
        return 'üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ';
      case 'night':
        return 'üåô –ù–æ—á—å';
      default:
        return '‚è∏Ô∏è –ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ';
    }
  };

  const getPhaseColor = (): string => {
    switch (phase) {
      case 'discussion':
        return '#4CAF50';
      case 'voting':
        return '#FF9800';
      case 'night':
        return '#2196F3';
      default:
        return '#666';
    }
  };

  return (
    <div className="mafia-host-timer">
      <div className="timer-header">
        <button onClick={onBack} className="back-button">‚Üê –ù–∞—Å—Ç—Ä–æ–π–∫–∏</button>
        <h2>üé≠ –í–µ–¥—É—â–∏–π –ú–∞—Ñ–∏–∏</h2>
        <p>–ò–≥—Ä–æ–∫–æ–≤: {settings.playerCount}</p>
      </div>

      <div className="server-status">
        {!gameStarted ? (
          <button onClick={createGameOnServer} className="create-game-button">
            üéØ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          </button>
        ) : (
          <div className="game-info">
            <p>{serverStatus}</p>
            <div className="player-access-section">
              <h4>üì± –î–æ—Å—Ç—É–ø –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤:</h4>
              <button 
                onClick={() => setShowQRModal(true)}
                className="show-qr-button"
              >
                üì± –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥
              </button>
              <p className="access-hint">
                –ò–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
              </p>
            </div>
          </div>
        )}
      </div>

      <div className="timer-display" style={{ borderColor: getPhaseColor() }}>
        <div className="phase-name" style={{ color: getPhaseColor() }}>
          {getPhaseText()}
        </div>
        <div className="time-display">
          {formatTime(timeLeft)}
        </div>
        <div className="timer-status">
          {isActive ? '‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–µ–Ω' : '‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
        </div>
      </div>

      <div className="timer-controls">
        <div className="phase-buttons">
          <button 
            onClick={() => startTimer('discussion')}
            className="phase-button discussion"
            disabled={!gameStarted}
          >
            üí¨ –û–±—Å—É–∂–¥–µ–Ω–∏–µ<br/>
            <small>({formatTime(settings.discussionTime)})</small>
          </button>
          
          <button 
            onClick={() => startTimer('voting')}
            className="phase-button voting"
            disabled={!gameStarted}
          >
            üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ<br/>
            <small>({formatTime(settings.votingTime)})</small>
          </button>
          
          <button 
            onClick={() => startTimer('night')}
            className="phase-button night"
            disabled={!gameStarted}
          >
            üåô –ù–æ—á—å<br/>
            <small>({formatTime(settings.nightTime)})</small>
          </button>
        </div>

        <div className="control-buttons">
          <button 
            onClick={stopTimer}
            className="control-button stop"
            disabled={!isActive}
          >
            ‚è∏Ô∏è –°—Ç–æ–ø
          </button>
          
          <button 
            onClick={resetTimer}
            className="control-button reset"
          >
            üîÑ –°–±—Ä–æ—Å
          </button>
        </div>
      </div>

      <div className="game-management">
        <button onClick={resetGameOnServer} className="reset-game-button">
          üÜï –ù–æ–≤–∞—è –∏–≥—Ä–∞ (—Å–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª–∏)
        </button>
        
        <button onClick={onNewGame} className="new-setup-button">
          ‚öôÔ∏è –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        </button>
      </div>

      <div className="instructions">
        <h3>üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h3>
        <ul>
          <li>–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ</li>
          <li>–î–∞–π—Ç–µ –∏–≥—Ä–æ–∫–∞–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π</li>
          <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —Ñ–∞–∑ –∏–≥—Ä—ã</li>
          <li>–ö–æ–≥–¥–∞ –≤—Å–µ —Ä–æ–ª–∏ —Ä–æ–∑–¥–∞–Ω—ã - –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∏–≥—Ä—É</li>
        </ul>
      </div>

      <QRCodeModal 
        isOpen={showQRModal}
        onClose={() => setShowQRModal(false)}
      />
    </div>
  );
};