import React, { useState } from 'react';
import { useParams } from 'react-router-dom';

interface MafiaRole {
  role: string;
  roleInfo: {
    name: string;
    description: string;
    team: string;
    nightAction: boolean;
  };
  playerNumber: number;
  totalPlayers: number;
  isLastPlayer: boolean;
}

interface MafiaPlayerScreenProps {
  roomId?: string | null;
}

export const MafiaPlayerScreen: React.FC<MafiaPlayerScreenProps> = ({ roomId: propRoomId }) => {
  const { roomId: paramRoomId } = useParams<{ roomId: string }>();
  const roomId = propRoomId || paramRoomId;
  const [playerRole, setPlayerRole] = useState<MafiaRole | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');

  const getRoleFromServer = async () => {
    setIsLoading(true);
    setError('');
    
    try {
      const url = roomId 
        ? `https://mafia-backend-5z0e.onrender.com/api/mafia/get-role?roomId=${roomId}`
        : 'https://mafia-backend-5z0e.onrender.com/api/mafia/get-role';
      
      const response = await fetch(url);
      
      if (response.ok) {
        const data = await response.json();
        setPlayerRole(data);
      } else {
        const errorData = await response.json();
        setError(errorData.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setIsLoading(false);
    }
  };

  const getRoleColor = (role: string): string => {
    switch (role) {
      case 'mafia':
      case 'don':
        return '#e74c3c';
      case 'citizen':
        return '#27ae60';
      case 'doctor':
        return '#3498db';
      case 'detective':
      case 'sheriff':
        return '#f39c12';
      default:
        return '#95a5a6';
    }
  };

  const getRoleEmoji = (role: string): string => {
    switch (role) {
      case 'mafia':
        return 'üî´';
      case 'don':
        return 'üëë';
      case 'citizen':
        return 'üë•';
      case 'doctor':
        return 'üë®‚Äç‚öïÔ∏è';
      case 'detective':
        return 'üïµÔ∏è';
      case 'sheriff':
        return 'ü§†';
      default:
        return 'üé≠';
    }
  };

  if (playerRole) {
    return (
      <div className="mafia-player-screen">
        <div className="role-card" style={{ borderColor: getRoleColor(playerRole.role) }}>
          <div className="role-header">
            <div className="role-emoji">{getRoleEmoji(playerRole.role)}</div>
            <h2 className="role-name" style={{ color: getRoleColor(playerRole.role) }}>
              {playerRole.roleInfo.name}
            </h2>
            <div className="player-info">
              –ò–≥—Ä–æ–∫ {playerRole.playerNumber} –∏–∑ {playerRole.totalPlayers}
            </div>
          </div>
          
          <div className="role-content">
            <div className="role-description">
              <h3>üìã –í–∞—à–∞ –∑–∞–¥–∞—á–∞:</h3>
              <p>{playerRole.roleInfo.description}</p>
            </div>
            
            <div className="role-team">
              <h3>‚ö° –ö–æ–º–∞–Ω–¥–∞:</h3>
              <div className={`team-badge ${playerRole.roleInfo.team}`}>
                {playerRole.roleInfo.team === 'mafia' ? 'üî¥ –ú–∞—Ñ–∏—è' : 'üîµ –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏'}
              </div>
            </div>
            
            {playerRole.roleInfo.nightAction && (
              <div className="night-action-info">
                <h3>üåô –ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</h3>
                <p>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–æ—á—å—é</p>
              </div>
            )}
            
            <div className="game-tips">
              <h3>üí° –°–æ–≤–µ—Ç—ã:</h3>
              <ul>
                {playerRole.roleInfo.team === 'mafia' ? (
                  <>
                    <li>–°–∫—Ä—ã–≤–∞–π—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å –æ—Ç –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π</li>
                    <li>–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –º–∞—Ñ–∏–æ–∑–∏</li>
                    <li>–£–±–∏–≤–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–æ—á—å—é</li>
                  </>
                ) : (
                  <>
                    <li>–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤</li>
                    <li>–ò—â–∏—Ç–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ</li>
                    <li>–ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ñ–∏–∏</li>
                  </>
                )}
              </ul>
            </div>
          </div>
          
          <div className="role-footer">
            <div className="warning-message">
              ‚ö†Ô∏è –ó–∞–ø–æ–º–Ω–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å –∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –µ—ë –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º!
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="mafia-player-screen">
      <div className="welcome-card">
        <div className="welcome-header">
          <h1>üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞—Ñ–∏—é!</h1>
          <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å</p>
        </div>
        
        <div className="welcome-content">
          {!isLoading && !error && (
            <>
              <div className="game-rules">
                <h3>üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</h3>
                <ul>
                  <li>üåô <strong>–ù–æ—á—å:</strong> –ú–∞—Ñ–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç –∂–µ—Ä—Ç–≤—É</li>
                  <li>‚òÄÔ∏è <strong>–î–µ–Ω—å:</strong> –í—Å–µ –æ–±—Å—É–∂–¥–∞—é—Ç –∏ –≥–æ–ª–æ—Å—É—é—Ç</li>
                  <li>üéØ <strong>–¶–µ–ª—å –º–∞—Ñ–∏–∏:</strong> –°—Ç–∞—Ç—å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º</li>
                  <li>üèÜ <strong>–¶–µ–ª—å –º–∏—Ä–Ω—ã—Ö:</strong> –ù–∞–π—Ç–∏ –≤—Å—é –º–∞—Ñ–∏—é</li>
                </ul>
              </div>
              
              <button 
                onClick={getRoleFromServer}
                className="get-role-button"
              >
                üé≤ –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å
              </button>
            </>
          )}
          
          {isLoading && (
            <div className="loading-state">
              <div className="loading-spinner"></div>
              <p>–ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å...</p>
            </div>
          )}
          
          {error && (
            <div className="error-state">
              <div className="error-icon">‚ùå</div>
              <h3>–û—à–∏–±–∫–∞</h3>
              <p>{error}</p>
              <button 
                onClick={getRoleFromServer}
                className="retry-button"
              >
                üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};