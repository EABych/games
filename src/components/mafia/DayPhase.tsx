import React from 'react';
import { ROLE_INFO } from '../../data/mafiaRoles';
import type { MafiaGameState } from '../../types/mafia';

interface DayPhaseProps {
  gameState: MafiaGameState;
  onVote: (playerId: string) => void;
  onContinueToNight: () => void;
}

export const DayPhase: React.FC<DayPhaseProps> = ({ 
  gameState, 
  onVote, 
  onContinueToNight 
}) => {
  const alivePlayers = gameState.players.filter(p => p.isAlive && p.role !== 'moderator');
  
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getPhaseTitle = () => {
    switch (gameState.phase) {
      case 'discussion':
        return 'üí¨ –û–±—Å—É–∂–¥–µ–Ω–∏–µ';
      case 'voting':
        return 'üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ';
      default:
        return '‚òÄÔ∏è –î–µ–Ω—å';
    }
  };

  const getPhaseDescription = () => {
    switch (gameState.phase) {
      case 'discussion':
        return '–í—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è. –ù–∞–π–¥–∏—Ç–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤!';
      case 'voting':
        return '–ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –∏–≥—Ä—ã';
      default:
        return '';
    }
  };

  const getTotalVotes = () => {
    return Object.values(gameState.votingResults).reduce((sum, votes) => sum + votes, 0);
  };

  return (
    <div className="day-phase">
      <div className="day-header">
        <h2>{getPhaseTitle()} - –î–µ–Ω—å {gameState.currentRound}</h2>
        {gameState.timeRemaining > 0 && (
          <div className={`timer ${gameState.timeRemaining <= 30 ? 'timer-warning' : ''}`}>
            {formatTime(gameState.timeRemaining)}
          </div>
        )}
        <p className="phase-description">{getPhaseDescription()}</p>
      </div>

      <div className="players-grid">
        {alivePlayers.map((player) => {
          const votes = gameState.votingResults[player.id] || 0;
          const roleInfo = ROLE_INFO[player.role];
          
          return (
            <div key={player.id} className="player-card">
              <div className="player-info">
                <div className="player-avatar">
                  {player.isRevealed ? roleInfo.emoji : 'üë§'}
                </div>
                <div className="player-details">
                  <h4>{player.name}</h4>
                  {player.isRevealed && (
                    <span className="revealed-role" style={{ color: roleInfo.color }}>
                      {roleInfo.name}
                    </span>
                  )}
                </div>
              </div>
              
              {gameState.phase === 'voting' && (
                <div className="voting-section">
                  <button
                    className="vote-button"
                    onClick={() => onVote(player.id)}
                  >
                    –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å
                  </button>
                  {votes > 0 && (
                    <div className="vote-count">
                      –ì–æ–ª–æ—Å–æ–≤: {votes}
                    </div>
                  )}
                </div>
              )}
            </div>
          );
        })}
      </div>

      {gameState.phase === 'voting' && (
        <div className="voting-info">
          <p>–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {getTotalVotes()}</p>
          <p>–ò–≥—Ä–æ–∫–æ–≤: {alivePlayers.length}</p>
        </div>
      )}

      {gameState.timeRemaining === 0 && gameState.phase === 'voting' && (
        <button className="continue-button" onClick={onContinueToNight}>
          –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –Ω–æ—á–∏
        </button>
      )}
    </div>
  );
};