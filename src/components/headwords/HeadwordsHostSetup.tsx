import React, { useState, useEffect } from 'react';
import { HeadwordsGameSettings } from './types';

interface HeadwordsCategory {
  id: string;
  name: string;
  rolesCount: number;
}

interface HeadwordsHostSetupProps {
  onGameStart: (settings: HeadwordsGameSettings) => void;
  onBack: () => void;
}

export const HeadwordsHostSetup: React.FC<HeadwordsHostSetupProps> = ({ onGameStart, onBack }) => {
  const [playerCount, setPlayerCount] = useState<number>(4);
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [categories, setCategories] = useState<HeadwordsCategory[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  useEffect(() => {
    fetchCategories();
  }, []);

  const fetchCategories = async () => {
    try {
      const response = await fetch('https://mafia-backend-5z0e.onrender.com/api/headwords/categories');
      if (response.ok) {
        const data = await response.json();
        setCategories(data.categories);
        if (data.categories.length > 0) {
          setSelectedCategory(data.categories[0].id);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    }
  };

  const handlePlayerCountChange = (delta: number) => {
    const newCount = playerCount + delta;
    if (newCount >= 2 && newCount <= 20) {
      setPlayerCount(newCount);
    }
  };

  const handleStartGame = () => {
    if (!selectedCategory) return;
    
    setIsLoading(true);
    onGameStart({
      playerCount,
      category: selectedCategory
    });
  };

  const selectedCategoryData = categories.find(cat => cat.id === selectedCategory);
  const canStart = selectedCategory && playerCount >= 2 && playerCount <= 20 && 
                   selectedCategoryData && playerCount <= selectedCategoryData.rolesCount;

  return (
    <div className="headwords-host-setup">
      <div className="setup-header">
        <button onClick={onBack} className="back-button">‚Üê –ò–≥—Ä—ã</button>
        <h2>üé≠ –°–ª–æ–≤–∞ –Ω–∞ –ª–æ–±</h2>
        <p>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã</p>
      </div>

      <div className="setup-content">
        <div className="setting-section">
          <h3>üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤</h3>
          <div className="player-count-controls">
            <button 
              onClick={() => handlePlayerCountChange(-1)}
              className="count-button"
              disabled={playerCount <= 2}
            >
              ‚àí
            </button>
            <span className="player-count">{playerCount}</span>
            <button 
              onClick={() => handlePlayerCountChange(1)}
              className="count-button"
              disabled={playerCount >= 20 || (selectedCategoryData && playerCount >= selectedCategoryData.rolesCount)}
            >
              +
            </button>
          </div>
          <p className="player-count-hint">
            –û—Ç 2 –¥–æ {selectedCategoryData ? Math.min(20, selectedCategoryData.rolesCount) : 20} –∏–≥—Ä–æ–∫–æ–≤
          </p>
        </div>

        <div className="setting-section">
          <h3>üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è</h3>
          <div className="category-grid">
            {categories.map((category) => (
              <button
                key={category.id}
                onClick={() => setSelectedCategory(category.id)}
                className={`category-button ${selectedCategory === category.id ? 'selected' : ''}`}
              >
                <div className="category-name">{category.name}</div>
                <div className="category-count">{category.rolesCount} —Ä–æ–ª–µ–π</div>
              </button>
            ))}
          </div>
          {selectedCategoryData && (
            <p className="category-hint">
              –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "{selectedCategoryData.name}" - {selectedCategoryData.rolesCount} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π
            </p>
          )}
        </div>

        <div className="game-rules">
          <h3>üìñ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</h3>
          <ul>
            <li>üì± –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å —á–µ—Ä–µ–∑ QR-–∫–æ–¥</li>
            <li>‚è∞ –ï—Å—Ç—å —Ç–∞–π–º–µ—Ä, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ –ª–±—É</li>
            <li>üëÅÔ∏è –í—Å–µ –≤–∏–¥—è—Ç —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞, –∫—Ä–æ–º–µ –Ω–µ–≥–æ —Å–∞–º–æ–≥–æ</li>
            <li>‚ùì –ò–≥—Ä–æ–∫ –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã —É–≥–∞–¥–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å</li>
            <li>üéØ –¶–µ–ª—å: —É–≥–∞–¥–∞—Ç—å, –∫—Ç–æ —Ç—ã, –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—ã "–¥–∞/–Ω–µ—Ç"</li>
          </ul>
        </div>

        <div className="start-section">
          <button 
            onClick={handleStartGame}
            disabled={!canStart || isLoading}
            className="start-game-button"
          >
            {isLoading ? 'üîÑ –°–æ–∑–¥–∞–Ω–∏–µ...' : 'üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É'}
          </button>
          
          {!canStart && selectedCategory && (
            <p className="warning-message">
              {playerCount > (selectedCategoryData?.rolesCount || 0) 
                ? `–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${selectedCategoryData?.name}" –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–æ–ª–µ–π –¥–ª—è ${playerCount} –∏–≥—Ä–æ–∫–æ–≤`
                : '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤'
              }
            </p>
          )}
        </div>
      </div>
    </div>
  );
};