import React, { useState } from 'react';
import { useParams } from 'react-router-dom';

interface HeadwordsRole {
  playerNumber: number;
  totalPlayers: number;
  role: string;
  category: string;
  isLastPlayer: boolean;
  roomId?: string;
}

interface HeadwordsPlayerScreenProps {
  roomId?: string | null;
  onBackToGames?: () => void;
}

export const HeadwordsPlayerScreen: React.FC<HeadwordsPlayerScreenProps> = ({ roomId: propRoomId }) => {
  const { roomId: paramRoomId } = useParams<{ roomId: string }>();
  const roomId = propRoomId || paramRoomId;
  const [playerRole, setPlayerRole] = useState<HeadwordsRole | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');
  const [countdown, setCountdown] = useState<number>(0);
  const [isCountingDown, setIsCountingDown] = useState<boolean>(false);

  const getRoleFromServer = async () => {
    setIsLoading(true);
    setError('');

    try {
      const url = roomId
        ? `https://mafia-backend-5z0e.onrender.com/api/headwords/get-role?roomId=${roomId}`
        : 'https://mafia-backend-5z0e.onrender.com/api/headwords/get-role';

      const response = await fetch(url);

      if (response.ok) {
        const data = await response.json();
        // –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Ä–æ–ª–∏
        startCountdown(data);
      } else {
        const errorData = await response.json();
        setError(errorData.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏');
        setIsLoading(false);
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      setIsLoading(false);
      console.log(err)
    }
  };

  const startCountdown = (roleData: HeadwordsRole) => {
    setIsCountingDown(true);
    setCountdown(10);

    const timer = setInterval(() => {
      setCountdown((prev) => {
        if (prev <= 1) {
          clearInterval(timer);
          setIsCountingDown(false);
          setIsLoading(false);
          setPlayerRole(roleData);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
  };


  // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
  if (isCountingDown) {
    return (
      <div className="headwords-player-screen countdown-screen">
        <div className="countdown-container">
          <div className="countdown-header">
            <h1>üé≠ –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å!</h1>
            <p>–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ –ª–±—É –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ</p>
          </div>

          <div className="countdown-timer">
            <div className="countdown-number">{countdown}</div>
          </div>

          <div className="countdown-instruction">
            <p>üì± –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ</p>
            <p>ü§ö –ü—Ä–∏–∂–º–∏—Ç–µ –∫ –ª–±—É —ç–∫—Ä–∞–Ω–æ–º –Ω–∞—Ä—É–∂—É</p>
            <p>üë• –ü—É—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–∏–¥—è—Ç —ç–∫—Ä–∞–Ω</p>
          </div>
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑ —Ä–æ–ª–∏
  if (playerRole) {
    return (
      <div className="headwords-player-screen role-screen">
        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Ä–æ–ª—å—é –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω */}
        <div className="role-card-fullscreen">
          <div className="role-text-main">
            {playerRole.role}
          </div>
        </div>
      </div>
    );
  }

  // –≠–∫—Ä–∞–Ω –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏
  return (
    <div className="headwords-player-screen welcome-screen">
      <div className="welcome-card">
        <div className="welcome-header">
          <h1>üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–°–ª–æ–≤–∞ –Ω–∞ –ª–æ–±"!</h1>
          <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å</p>
        </div>

        <div className="welcome-content">
          {!isLoading && !error && (
            <>
              <div className="game-rules">
                <h3>üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</h3>
                <ul>
                  <li>üé≤ <strong>–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏:</strong> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–æ–ª—å</li>
                  <li>üì± <strong>–¢–∞–π–º–µ—Ä:</strong> –£ –≤–∞—Å –±—É–¥–µ—Ç 10 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ –ª–±—É</li>
                  <li>üîÑ <strong>–ü–æ–≤–æ—Ä–æ—Ç:</strong> –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏</li>
                  <li>‚ùì <strong>–í–æ–ø—Ä–æ—Å—ã:</strong> –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã "–¥–∞/–Ω–µ—Ç", —á—Ç–æ–±—ã —É–≥–∞–¥–∞—Ç—å —Ä–æ–ª—å</li>
                  <li>üéØ <strong>–¶–µ–ª—å:</strong> –£–≥–∞–¥–∞—Ç—å, –∫—Ç–æ –≤—ã, –Ω–µ –≥–ª—è–¥—è –Ω–∞ —ç–∫—Ä–∞–Ω</li>
                </ul>
              </div>

              <button
                onClick={getRoleFromServer}
                className="get-role-button"
              >
                üé≤ –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å
              </button>
            </>
          )}

          {isLoading && (
            <div className="loading-state">
              <div className="loading-spinner"></div>
              <p>–ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å...</p>
            </div>
          )}

          {error && (
            <div className="error-state">
              <div className="error-icon">‚ùå</div>
              <h3>–û—à–∏–±–∫–∞</h3>
              <p>{error}</p>
              <button
                onClick={getRoleFromServer}
                className="retry-button"
              >
                üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
