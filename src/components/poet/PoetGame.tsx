import React from 'react';
import type { PoetGameState } from '../../types/poet';

interface PoetGameProps {
  gameState: PoetGameState;
  onConfirmTask: (success: boolean) => void;
}

export const PoetGame: React.FC<PoetGameProps> = ({
  gameState,
  onConfirmTask
}) => {
  const currentPlayer = gameState.players[gameState.currentPlayerIndex];
  const isPlaying = gameState.phase === 'playing';


  const handleConfirm = () => {
    onConfirmTask(true);
  };

  const handleFail = () => {
    onConfirmTask(false);
  };

  if (!isPlaying || !gameState.currentFirstLine || !currentPlayer) {
    return (
      <div className="poet-game loading">
        <div className="loading-content">
          <h2>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—É–Ω–¥–∞...</h2>
          <div className="loading-spinner"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="poet-game">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–≥—Ä—ã */}
      <div className="game-header">
        <div className="round-info">
          <h1>–†–∞—É–Ω–¥ {gameState.currentRound} –∏–∑ {gameState.settings.roundsCount}</h1>
          <div className="current-player">
            –•–æ–¥–∏—Ç: <strong>{currentPlayer.name}</strong>
          </div>
        </div>
        
        <div className="score-display">
          <div className="score-item">
            ‚úÖ {currentPlayer.completed}
          </div>
          <div className="score-item">
            ‚ùå {currentPlayer.failed}
          </div>
          <div className="score-item total">
            üèÜ {currentPlayer.score}
          </div>
        </div>
      </div>

      {/* –ó–∞–¥–∞–Ω–∏–µ */}
      <div className="task-display">
        <h2>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:</h2>
        <div className="task-text">
          –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É –∫ –¥–≤—É—Å—Ç–∏—à–∏—é:
        </div>
        <div className="first-line">
          "{gameState.currentFirstLine.text}"
        </div>
        {gameState.currentFirstLine.suggestedRhyme && (
          <div className="rhyme-suggestion">
            üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Ä–∏—Ñ–º—ã: {gameState.currentFirstLine.suggestedRhyme}
          </div>
        )}
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="action-phase">
        <div className="instruction">
          <p>–ü–æ–¥—É–º–∞–π—Ç–µ –Ω–∞–¥ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–æ–π –∏ –≤—ã–±–µ—Ä–∏—Ç–µ:</p>
        </div>
        
        <div className="action-buttons">
          <button 
            onClick={handleConfirm}
            className="confirm-btn"
          >
            ‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª
            <span className="points">+{gameState.settings.pointsForSuccess} –æ—á–∫–æ</span>
          </button>
          
          <button 
            onClick={handleFail}
            className="fail-btn"
          >
            ‚ùå –ù–µ —Å–º–æ–≥
            <span className="points">+{gameState.settings.pointsForFailure} –æ—á–∫–æ–≤</span>
          </button>
        </div>
        
        <div className="game-progress">
          <div className="players-list">
            {gameState.players.map((player, index) => (
              <div 
                key={player.id} 
                className={`player-item ${index === gameState.currentPlayerIndex ? 'current' : ''}`}
              >
                <span className="player-name">{player.name}</span>
                <span className="player-score">{player.score}</span>
              </div>
            ))}
          </div>
        </div>
      </div>

    </div>
  );
};